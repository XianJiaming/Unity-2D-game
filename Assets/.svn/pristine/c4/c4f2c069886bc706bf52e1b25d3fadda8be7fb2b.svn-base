using System;
using System.Collections.Generic;
using UnityEngine;
using DataClass;
public class Cooperation
{
    int id;
    public int GetId()
    {
        return id;
    }
    public string name;
    //是否生效
    //bool isEffect ;
    //当前战斗队列中的有该职业羁绊的角色们
    public List<RoleBase> roles = new List<RoleBase>();

    public int cooperCount; //当前羁绊角色数量（相同角色不能让数量+1）
    public int effectIndex; //羁绊生效的索引
    public int maxCount = 0;//最大羁绊生效数量
    //GameObject viewGo;

    //用属性id，找到每个属性对应 羁绊等级的 数值，静态数值不能做更改
    public Dictionary<int, int[]> attributes;

    ConfigCooperation configData;

    //构造方法里根据id赋予初始数据
    public Cooperation(int id)
    {
        configData = ConfigCooperationManager.Instance().allDatas[id];
        maxCount = configData.counts[configData.counts.Length - 1];

        this.id = id;
        name = configData.name;
        attributes = new Dictionary<int, int[]>();

        int[] attributeId = configData.attributes;

        var values = configData.values;

        for (int i=0;i<attributeId.Length;i++)
        {
            int[] idValues = new int[values.Length];
            for(int j=0;j< values.Length;j++ )
            {
                idValues[j] = values[j][i];
            }
            attributes.Add(attributeId[i], idValues);

            

        }



        Init();
    }
    //将其初始化，可由外调用
    public void Init( )
    {
        effectIndex = -1;
        cooperCount = 0;
        roles.Clear();
       /* isEffect = false;*/
    }
    //更新羁绊数量
    public void UpdateCooperCount()
    {
        cooperCount = 0;
        List<int> roleIdList = new List<int>();
        for(int i=0;i<roles.Count;i++)
        {
            if(!roleIdList.Contains(roles[i].GetRoleId()))
            {
                roleIdList.Add(roles[i].GetRoleId());
            }

        }
        cooperCount = roleIdList.Count;
    }
    public void Update(RoleBase[] roles)
    {
        UpdateRoles(roles);
        UpdateCooperCount();
        UpdateEffectIndex();
        foreach (var role in roles)
        {
            if(role!=null)
            GetEffect(role);
        }
    }


    //更新还属于该羁绊角色的属性
    public void AddUpdate(RoleBase[] roles, RoleBase newRole)
    {
        UpdateRoles(roles);
        //更新羁绊里的角色数量，再找出生效索引，然后在具体生效。
        //羁绊里有角色才搞这些

        UpdateCooperCount();

        int orEffectIndex = effectIndex;
        UpdateEffectIndex();
        int newEffectIndex = effectIndex;
        if (orEffectIndex == newEffectIndex)
        {
            GetEffect(newRole);         
        }
        else
        {
            foreach (var role in roles)
            {
                if (role != newRole)
                    RemoveEffect(role, orEffectIndex);
            }

            foreach (var role in roles)
            {
                if(role!=null)
                    GetEffect(role);
            }

        }
    }

    public void RemoveUpdate(RoleBase[] roles, RoleBase newRole)
    {
        
        UpdateRoles(roles);
        //如果还有角色
        if (this.roles.Count > 0)
        {
            int orCount = cooperCount;
            UpdateCooperCount();
            int newCount = cooperCount;
            
            if(orCount == newCount)
            {
                return;
            }
            //先按照原来的标准移出
            foreach (var role in roles)
            {
                if (role != newRole && role!= null)
                    RemoveEffect(role,effectIndex);
            }         
            UpdateEffectIndex();
            //再按照现在的标准添加
            foreach (var role in roles)
            {
                GetEffect(role);
            }

        }
    }

    public void RemoveNoEffect(RoleBase[] roles, RoleBase newRole)
    {
        RemoveEffect(newRole, effectIndex);
        RemoveUpdate(roles, newRole);
    }

    //更新该羁绊的当前角色
    void UpdateRoles(RoleBase[] roles )
    {
        this.roles.Clear();
        for (int i=0;i<roles.Length;i++)
        {
            if(roles[i]?.GetCooperId() == id)
            {
                this.roles.Add(roles[i]);
            }
        }
       
    }
    //让一个角色移出羁绊效果
    public void RemoveEffect(RoleBase role, int effectIndex)
    {
        if (effectIndex == -1)
            return;
        foreach (var v in attributes)
        {
            role.attributes[v.Key] -= v.Value[effectIndex];
        }
    }
    //让一个角色获得羁绊效果
    public void GetEffect(RoleBase role)
    {
        if (effectIndex == -1)
            return;
        foreach(var v in attributes)
        {
            role.attributes[v.Key] += v.Value[effectIndex];
        }
    }
    //根据具体的操作类型来更新该 羁绊 下的角色
//     public void UpdateIsEffect(RoleBase role, EnumType.FightListUpdateRole opType)
//     {
//         if(opType == EnumType.FightListUpdateRole.AddRole)
//         {
//             if( role.GetCooperId() == id)
//             {
//                 roles.Add(role);
//             }
//         }
//         else if( opType == EnumType.FightListUpdateRole.DeleteRole)
//         {
//             if( role.GetCooperId() == id)
//             {
//                 roles.Remove(role);
//             }
//         }
//         UpdateCooperCount();
//         UpdateEffectIndex();
//     }
    //根据人数来找生效的索引
    void UpdateEffectIndex()
    {
        int length = configData.counts.Length;

        effectIndex = -2;

        if(cooperCount < configData.counts[0])
        {
            effectIndex = -1;
            
        }
        else if(cooperCount > configData.counts[length - 1])
        {
            effectIndex = length - 1;
        }
        else
        {
            for (int i = 0; i < length; i++)
            {

                if (cooperCount == configData.counts[i])
                {
                    effectIndex = i;
                    break;
                }
                if (cooperCount < configData.counts[i])
                {
                    effectIndex = i - 1;
                    break;
                }
            }
        }
        


    }

    
}

