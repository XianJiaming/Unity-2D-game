using System;
using System.Collections.Generic;
using UnityEngine;
using DataClass;
public class Cooperation
{
    int id;
    public int GetId()
    {
        return id;
    }
    public string name;
    //是否生效
    //bool isEffect ;
    //当前战斗队列中属于该羁绊的生效角色们
    public List<RoleBase> roles = new List<RoleBase>();

    public int cooperCount; //羁绊数值（即，为该羁绊的所有不同的角色的数量）（相同角色不能让数量+1）
    public int effectIndex; //羁绊生效的索引
    public int maxCount = 0;//最大羁绊生效数量
    //GameObject viewGo;

    //用属性id，找到每个属性对应 羁绊等级的 数值，静态数值不能做更改
    public Dictionary<int, int[]> attributes;

    public int[] range;
    public int type;
    ConfigCooperation configData;
    //构造方法里根据id赋予初始数据
    public Cooperation(int id)
    {
        configData = ConfigCooperationManager.Instance().allDatas[id];
        maxCount = configData.counts[configData.counts.Length - 1];

        this.id = id;
        name = configData.name;
        attributes = configData.attributes;
        range = configData.range;
        type = configData.type;

        InitDesc();

        Init();
    }
    //将其初始化，可由外调用
    public void Init( )
    {
        effectIndex = -1;
        cooperCount = 0;
        roles.Clear();
       /* isEffect = false;*/
    }
    //更新羁绊数值
    public void UpdateCooperCount(RoleBase[] fightRoles)
    {
        cooperCount = 0;
        List<int> roleIdList = new List<int>();
        for(int i=0;i< fightRoles.Length;i++)
        {
            RoleBase role = fightRoles[i];
            if(role != null)
            {
                int cooperId = role.GetCooperId();
                int roleId = role.GetRoleId();
                if (!roleIdList.Contains(roleId) & cooperId == id )
                {
                    roleIdList.Add(roleId);
                }
            }
                

        }
        cooperCount = roleIdList.Count;
    }

    string desc;
    public string GetDesc()
    {
        return desc;
    }
    void InitDesc()
    {
        ConfigCooperation cooperData =ConfigCooperationManager.Instance().allDatas[GetId()];
        var attriData =ConfigAttributeManager.Instance().allDatas;
        var sb = new System.Text.StringBuilder();

        if (cooperData.type == 1) //具体数值
            for (int i = 0; i < cooperData.counts.Length; i++)
            {
                sb.Append($"人口：{cooperData.counts[i]}\n");
                foreach (var v in cooperData.attributes)
                {
                    sb.Append($"{ attriData[v.Key].name}: {v.Value[i]}  ");
                }
                int range = cooperData.range[i];
                if (range == 1)
                    sb.Append("\n范围: 只对该羁绊的角色生效\n");
                else if (range == 2)
                    sb.Append("\n范围: 对我方所有角色生效\n");


            }
        else if (cooperData.type == 2)
        {
            for (int i = 0; i < cooperData.counts.Length; i++)
            {
                sb.Append($"人口：{cooperData.counts[i]}\n");
                foreach (var v in cooperData.attributes)
                {
                    sb.Append($"{ attriData[v.Key].name}: {v.Value[i]}%  ");
                }
                int range = cooperData.range[i];
                if (range == 1)
                    sb.Append("\n范围: 只对该羁绊的角色生效\n");
                else if (range == 2)
                    sb.Append("\n范围: 对我方所有角色生效\n");
            }
        }

        desc = sb.ToString();
    }


    //初始化时调用，所有的角色获得当前羁绊的数据

    public void Update(RoleBase[] fightRoles)
    {
       
        UpdateCooperCount(fightRoles);
        UpdateEffectIndex();
        UpdateRoles(fightRoles);

        foreach (var role in roles)
        {
            if(role!=null)
            GetEffect(role);
        }

        
    }


    //更新还属于该羁绊角色的属性 
    //添加了一个新角色，这个角色要单独处理
    // roles 战斗队列中的角色 newRole本次添加的新角色
    public void AddUpdate(RoleBase[] fightRoles, RoleBase newRole)
    {
        UpdateRoles(fightRoles);
        //更新羁绊里的角色数量，再找出生效索引，然后在具体生效。
        //羁绊里有角色才搞这些

        UpdateCooperCount(fightRoles);

        int orEffectIndex = effectIndex;
        UpdateEffectIndex();
        int newEffectIndex = effectIndex;
        if (orEffectIndex == newEffectIndex)
        {
            GetEffect(newRole);         
        }
        else
        {
            foreach (var role in fightRoles)
            {
                if (role != newRole)
                    RemoveEffect(role, orEffectIndex);
            }

            foreach (var role in fightRoles)
            {
                if(role!=null)
                    GetEffect(role);
            }

        }
    }
    //当有角色移出时，需要对剩下的角色做羁绊效果调整
    //第一个参数 是 战斗队列中的所有角色
    public void RemoveUpdate(RoleBase[] fightRoles, RoleBase newRole)
    {
        RemoveEffect(newRole, effectIndex);

        Debug.Log("移出角色后，对剩下的角色做更新");
        UpdateRoles(fightRoles);
        Debug.Log($"{name}羁绊的角色数量为{this.roles.Count}");
        //如果还有角色
        if (this.roles.Count > 0)
        {
            int orCount = cooperCount;
            Debug.Log("原本羁绊数值" + orCount.ToString());
            //更新羁绊当前数量（非真正角色数量，重复的角色不算）
            UpdateCooperCount(fightRoles);
            int newCount = cooperCount;
            Debug.Log("现在羁绊数值" + newCount.ToString());
            if (orCount == newCount)
            {
                return;
            }
            //先按照原来的标准移出
            foreach (var role in this.roles)
            {
                if (role != newRole && role!= null)
                    RemoveEffect(role,effectIndex);
            }         
            UpdateEffectIndex();
            //再按照现在的标准添加
            foreach (var role in this.roles)
            {
                GetEffect(role);
            }

        }
        else
        {
            UpdateCooperCount(fightRoles);
            UpdateEffectIndex();
        }
        
    }
    //角色移出时 不需要为该角色修改属性
    public void RemoveNoEffect(RoleBase[] roles, RoleBase newRole)
    {
        RemoveEffect(newRole, effectIndex);
        RemoveUpdate(roles, newRole);
    }

    //更新该羁绊作用的当前角色,包括重复的对象
    void UpdateRoles(RoleBase[] fightRoles )
    {
        int rangeType = -1;
        if (effectIndex!= -1)
         rangeType = range[effectIndex];
        else
        {
            //当前羁绊没有生效，所以不存在对角色产生作用
            roles.Clear();
            return;
        }


        this.roles.Clear();
        //只对该羁绊的角色生效
        if(rangeType == 1)
        {
            Debug.Log("类型1");
            for (int i = 0; i < fightRoles.Length; i++)
            {
                if (fightRoles[i]?.GetCooperId() == id)
                {
                    this.roles.Add(fightRoles[i]);
                }
            }
        }
        //对所有角色生效
        else if( rangeType == 2)
        {
            foreach(RoleBase r in fightRoles)
            {
                this.roles.Add(r);
            }
        }

        
       
    }
    //让一个角色移出羁绊效果
    public void RemoveEffect(RoleBase role, int effectIndex )
    {
        if (effectIndex == -1)
            return;
       

        if (type == 1)
        {
            foreach (var v in attributes)
            {
                role.attributes[v.Key] -= v.Value[effectIndex];
            }
        }
        else if (type == 2)
        {
            foreach (var v in attributes)
            {
               

                float changeVlu = DataClass.ConfigRoleManager.Instance().allDatas[role.GetRoleId()].attributes[role.GetLevel() - 1][v.Key]
                    * v.Value[effectIndex] * 1.0f / 100;

                role.attributes[v.Key] -= changeVlu;

            }
        }
        else
        {
            Debug.LogError("羁绊 数值 种类数据配置错误");
        }

    }
    //让一个角色获得羁绊效果
    public void GetEffect(RoleBase role)
    {       

        if (effectIndex == -1)
            return;

        if(type == 1)
        {
            foreach (var v in attributes)
            {
                role.attributes[v.Key] += v.Value[effectIndex];
            }
        }
        else if(type == 2)
        {
            
            foreach (var v in attributes)
            { 
                float changeVlu = DataClass.ConfigRoleManager.Instance().allDatas[role.GetRoleId()].attributes[role.GetLevel() - 1][v.Key] 
                    * v.Value[effectIndex]*1.0f/100;

               

                role.attributes[v.Key] += changeVlu;
            }
        }
        else
        {
            Debug.LogError("羁绊 数值 种类数据配置错误");
        }
        
    }
    //根据具体的操作类型来更新该 羁绊 下的角色
//     public void UpdateIsEffect(RoleBase role, EnumType.FightListUpdateRole opType)
//     {
//         if(opType == EnumType.FightListUpdateRole.AddRole)
//         {
//             if( role.GetCooperId() == id)
//             {
//                 roles.Add(role);
//             }
//         }
//         else if( opType == EnumType.FightListUpdateRole.DeleteRole)
//         {
//             if( role.GetCooperId() == id)
//             {
//                 roles.Remove(role);
//             }
//         }
//         UpdateCooperCount();
//         UpdateEffectIndex();
//     }
    //根据人数来找生效的索引
    void UpdateEffectIndex()
    {
        int length = configData.counts.Length;

        effectIndex = -2;

        if(cooperCount < configData.counts[0])
        {
            effectIndex = -1;
            
        }
        else if(cooperCount > configData.counts[length - 1])
        {
            effectIndex = length - 1;
        }
        else
        {
            for (int i = 0; i < length; i++)
            {

                if (cooperCount == configData.counts[i])
                {
                    effectIndex = i;
                    break;
                }
                if (cooperCount < configData.counts[i])
                {
                    effectIndex = i - 1;
                    break;
                }
            }
        }
        


    }

    
}

