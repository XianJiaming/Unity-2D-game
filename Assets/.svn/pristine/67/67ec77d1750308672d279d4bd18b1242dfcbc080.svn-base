using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using UnityEngine.UI;
using DataClass;


// 0	"力量"
// 1	"守御"
// 2	"速度"
// 3	"抗性"
// 4	"精神"
// 5	"生命"
// 6	"法力"
// 7	"当前生命"
// 8	"当前内力"


public class RoleBase
{

    //public const string roleModelPath = "Prefab/RoleModel/";
    //属性
    int id;
    
    public string name;
    //所有的属性存在这里
    public float[] attributes = new float[9];
    //职业羁绊id
    int cooperId;
    public int GetCooperId()
    {
        return cooperId;
    }
    public int GetRoleId()
    {
        return id;
    }
    int level;
    public int GetLevel( )
    {
        return level;
    }
    int cost; //初始价值
    int price = 0;
    public int GetPrice()
    {
        return price;
    }

    //gameObject组件
    Image hpImg;
    Text nameText;
    GameObject uiGo;
    //行动计时
    bool isStop = false;
    float actTime = 0f;

    //战斗相关
    public RoleBase[] team;
    RoleBase[] enemy;
    public int positionIndex = -1;

    //技能
    public SkillBase skill;

    bool isSilent = false; //被沉默后就不能回蓝了
    public void SetSilent(bool value)
    {
        isSilent = value;
    }

    public void SetTeamAndEnemy(RoleBase[] team, RoleBase[] enemy)
    {
        this.team = team;
        this.enemy = enemy;
    }
    //战斗前做初始化，血回满，蓝量清空之类的
    public void BeginFight()
    {
        
        actTime = 0;
        //hpImg.gameObject.SetActive(true);
        //attributes[7] = attributes[5];
        SetHp(attributes[5]);
        //内力归0
        attributes[8] = 0;
        
    }
    //角色新建时 从配置表里读数据,传入的是 数据项的id，不是角色id
    public void SetId( int id , int level = 1)
    {
        var data = ConfigRoleManager.Instance().allDatas[id];
        this.id = id;
        name = data.name;
        cost = data.cost;

        SetLevel(level);
        cooperId = data.cooperId;
        
        for (int i = 0; i < data.attributes[level - 1].Length; i++)
        {
            attributes[i] = data.attributes[level-1][i];
        }
        UpdateView();

        //创建技能对象
        skill = new SkillBase();
        skill.SetId(data.skillId, level, this);

        

        //获取fight gameobject资源 并且实例化，实例化后隐藏
        //fightRole = ObjectPool.Instance().GetRoleGo(name);
    }
    
    public void SetStop(bool value)
    {
        isStop = value;
    }

    public void SetUIGo(GameObject go)
    {
        this.uiGo = go;
        nameText = go.transform.Find("name").GetComponent<Text>();
        hpImg = UIUtil.GetImage(go, "hpImg");
        
    }
    public GameObject GetGo()
    {
        return uiGo;
    }
    //设置战斗中的角色模型
    //----------------------------------------------------战斗相关
    public GameObject fightRole;
    Text hpText;
    Text mpText;
    Text fightNameText;
    public void SetFightGo(GameObject go)
    {
        fightRole = go;
        
        hpText = UIUtil.GetText(fightRole, "hp");
        mpText = UIUtil.GetText(fightRole, "mp");
        fightNameText = UIUtil.GetText(fightRole, "name");
        fightRole.SetActive(true);
        UpdateFightGo();
    }
    void UpdateFightGo()
    {
        hpText.text = attributes[7].ToString();
        mpText.text = attributes[8].ToString();
        fightNameText.text = name;
    }

    void UpdateHpView()
    {
        if(hpText)
        hpText.text = attributes[7].ToString();
    }
    void UpdateMpView()
    {
        if(mpText)
        mpText.text = attributes[8].ToString();
    }


    //----------------------------------------------------战斗相关

//     public void Init( int roleId, GameObject go = null )
//     {
//        
//         this.uiGo = go;
//           
//         SetId(roleId);
//         
//     }

//     public void UpdateHpView( )
//     {
//         float v = attributes[7] * 1.0f / attributes[5];
//         
//         hpImg.fillAmount = v;
//     }

    public void UpdateView()
    {
        if(nameText!=null)
        nameText.text = name;
    }
    //对外挨打的接口，是普通攻击的
    public void BeAttack(int hurtValue, RoleBase attacker = null)
    {

        EventManager.ExecuteEvent(EventType.RoleBeAttack, this);


        float param = 1.0f;
        float shouyu = attributes[1];
        if(shouyu > 0 )
        {
            param = 1 - shouyu * 0.03f / (1 + shouyu * 0.03f); 
        }
        else
        {
            param = 2 - Mathf.Pow(0.98f, -shouyu);
        }
        int getHurtValue = (int)(hurtValue * param);

        int mp = Random.Range(Mathf.Min(25, getHurtValue / 10), Mathf.Min(50, getHurtValue / 5));
        AddMp(mp);

        GetHurt(getHurtValue);
        
    }
    //被技能打了
    public void BeSkillAttack(int hurtValue )
    {
        int getHurtValue = (int)(hurtValue - attributes[3] * 0.1f);
    }

    bool isWd = false;
    public void SetWd(bool value)
    {
        isWd = value;
    }

    void GetHurt(int value)
    {
        if (isWd) value = 0;
        SetHp(attributes[7] - value  );
        var wndTips = ViewManager.Get("WndTips") as WndTips;
        wndTips.ShowMsg(value.ToString(), fightRole.transform.position);
        
    }
    //获得治疗
    public void GetTreat(int value )
    {
        SetHp(attributes[7] + value);
        var wndTips = ViewManager.Get("WndTips") as WndTips;
        wndTips.ShowMsg(value.ToString(), fightRole.transform.position);
    }

    //升一级
    //角色没有升级，触发升级时就是原角色被销毁，创建一个新角色
    void SetLevel(int value)
    {
        level = value;
        price = level * cost;
    }

    void SetHp( int value)
    {
        attributes[7] = value;
        UpdateHpView();

        if (attributes[7] <= 0)
            Die();
    }
    void SetHp(float value)
    {
        SetHp( (int)(value));
    }

    void SetMp(int value)
    {
        attributes[8] = value;
        UpdateMpView();
    }
    void SetMp(float value)
    {
        SetMp((int)value);
    }
    int GetAttackValue()
    {
        return (int)attributes[0];
    }

    public void Attack(RoleBase target )
    {
        if (target == null)
        {
            Debug.Log(name+"攻击的目标为空");
        }

        int hurtValue = GetAttackValue();    //获取输出伤害

        Vector3 orPosition = fightRole.transform.position;

        fightRole.transform.DOMove(target.fightRole.transform.position, 0.5f).OnComplete(
            ( ) =>
            {
                
                int mpValue = (int)attributes[4];

                AddMp(80); //内力增加

                target.BeAttack(hurtValue);
                fightRole.transform.DOMove(orPosition, 0.5f).OnComplete(AfterAct);
            }
            );
    }
    void AddMp(int value)
    {
        SetMp(attributes[8] + value);
        if (attributes[8] > attributes[6])
            SetMp(attributes[6]);
    }


    RoleBase GetTarget()
    {
        RoleBase target = null;

        for(int i=0;i<enemy.Length;i++)
        {
            if (enemy[i] != null)
            {
                target = enemy[i];
                break;
            }
        }
        return target;
    }
    //战斗结束时调用
    public void EndFight()
    {
        //ObjectPool.Instance().SaveRoleGo(name, fightRole);
    }

    //角色死亡时 告诉别人他挂了
    public void Die()
    {
        fightRole.SetActive(false);
        EventManager.ExecuteEvent(EventType.RoleDie, this);
    }

    //使用速度属性来判断是否可以执行
    public bool CanAct()
    {
        return actTime >= 3*0.5f/(1+ (attributes[2] - 3)*0.1f );
    }

    //开始行动，判断是攻击还是使用技能
    public void Act()
    {
        FightManager.instance.isAnyoneAct = true;
        actTime = 0f;

        if(attributes[8] >= attributes[6])
        {
            var wndTips = ViewManager.Get<WndTips>("WndTips");
            wndTips.ShowMsg(skill.name, fightRole.transform.position);

            //找到目标，并且处理数据
            skill.Use(team, enemy);


            //用完技能后蓝条归0
            attributes[8] = 0;
        }
        else
        {
            Attack(GetTarget());
        }      
    }
    //行动完成后
    void AfterAct()
    {
        FightManager.instance.isAnyoneAct = false;
    }

    public void Update()
    {
        //如果别人在行动就停止
        if (FightManager.instance.isAnyoneAct) return;
        //如果自己不能行动就停止
        if (isStop) return;
        

        actTime += Time.deltaTime;
        if (CanAct())
            Act();
    }
    public EnumType.FightListType fightListType;

    public void SetFightIndex(EnumType.FightListType type, int index )
    {
        positionIndex = index;
        fightListType = type;

    }
    //战斗前将其移动至对应的战斗位置
    //index为该角色在所在战斗队列的位置索引
//     public void SetFightPosition(Vector3 position , int index)
//     {
//         fightRole.transform.position = position;
//         positionIndex = index;
//     }
}
